!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="/",e(e.s=165)}({165:function(t,n,e){t.exports=e(166)},166:function(t,n,e){"use strict";e.r(n);var r=function(t,n){let e,r;if(void 0===n)for(const n of t)null!=n&&(void 0===e?n>=n&&(e=r=n):(e>n&&(e=n),r<n&&(r=n)));else{let i=-1;for(let o of t)null!=(o=n(o,++i,t))&&(void 0===e?o>=o&&(e=r=o):(e>o&&(e=o),r<o&&(r=o)))}return[e,r]},i=function(t){return t};function o(t,n,e,r){return function t(i,o){if(o>=r.length)return e(i);const a=new Map,u=r[o++];let c=-1;for(const t of i){const n=u(t,++c,i),e=a.get(n);e?e.push(t):a.set(n,[t])}for(const[n,e]of a)a.set(n,t(e,o));return n(a)}(t,0)}var a=Array.prototype.slice,u=function(t){return t};function c(t){return"translate("+(t+.5)+",0)"}function s(t){return"translate(0,"+(t+.5)+")"}function l(t){return n=>+t(n)}function f(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function h(){return!this.__axis}function p(t,n){var e=[],r=null,i=null,o=6,p=6,g=3,d=1===t||4===t?-1:1,v=4===t||2===t?"x":"y",y=1===t||3===t?c:s;function m(a){var c=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,s=null==i?n.tickFormat?n.tickFormat.apply(n,e):u:i,m=Math.max(o,0)+g,_=n.range(),w=+_[0]+.5,x=+_[_.length-1]+.5,M=(n.bandwidth?f:l)(n.copy()),b=a.selection?a.selection():a,A=b.selectAll(".domain").data([null]),k=b.selectAll(".tick").data(c,n).order(),T=k.exit(),S=k.enter().append("g").attr("class","tick"),C=k.select("line"),N=k.select("text");A=A.merge(A.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),k=k.merge(S),C=C.merge(S.append("line").attr("stroke","currentColor").attr(v+"2",d*o)),N=N.merge(S.append("text").attr("fill","currentColor").attr(v,d*m).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),a!==b&&(A=A.transition(a),k=k.transition(a),C=C.transition(a),N=N.transition(a),T=T.transition(a).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=M(t))?y(t):this.getAttribute("transform")})),S.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return y(n&&isFinite(n=n(t))?n:M(t))}))),T.remove(),A.attr("d",4===t||2==t?p?"M"+d*p+","+w+"H0.5V"+x+"H"+d*p:"M0.5,"+w+"V"+x:p?"M"+w+","+d*p+"V0.5H"+x+"V"+d*p:"M"+w+",0.5H"+x),k.attr("opacity",1).attr("transform",(function(t){return y(M(t))})),C.attr(v+"2",d*o),N.attr(v,d*m).text(s),b.filter(h).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),b.each((function(){this.__axis=M}))}return m.scale=function(t){return arguments.length?(n=t,m):n},m.ticks=function(){return e=a.call(arguments),m},m.tickArguments=function(t){return arguments.length?(e=null==t?[]:a.call(t),m):e.slice()},m.tickValues=function(t){return arguments.length?(r=null==t?null:a.call(t),m):r&&r.slice()},m.tickFormat=function(t){return arguments.length?(i=t,m):i},m.tickSize=function(t){return arguments.length?(o=p=+t,m):o},m.tickSizeInner=function(t){return arguments.length?(o=+t,m):o},m.tickSizeOuter=function(t){return arguments.length?(p=+t,m):p},m.tickPadding=function(t){return arguments.length?(g=+t,m):g},m}var g={value:()=>{}};function d(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new v(r)}function v(t){this._=t}function y(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function m(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function _(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=g,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}v.prototype=d.prototype={constructor:v,on:function(t,n){var e,r=this._,i=y(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=_(r[e],t.name,n);else if(null==n)for(e in r)r[e]=_(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=m(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new v(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var w=d;function x(){}var M=function(t){return null==t?x:function(){return this.querySelector(t)}},b=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)};function A(){return[]}var k=function(t){return null==t?A:function(){return this.querySelectorAll(t)}};var T=function(t){return function(){return this.matches(t)}};function S(t){return function(n){return n.matches(t)}}var C=Array.prototype.find;function N(){return this.firstElementChild}var D=Array.prototype.filter;function E(){return this.children}var U=function(t){return new Array(t.length)};function L(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}L.prototype={constructor:L,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var F=function(t){return function(){return t}};function Y(t,n,e,r,i,o){for(var a,u=0,c=n.length,s=o.length;u<s;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new L(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function H(t,n,e,r,i,o,a){var u,c,s,l=new Map,f=n.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(c=n[u])&&(p[u]=s=a.call(c,c.__data__,u,n)+"",l.has(s)?i[u]=c:l.set(s,c));for(u=0;u<h;++u)s=a.call(t,o[u],u,o)+"",(c=l.get(s))?(r[u]=c,c.__data__=o[u],l.delete(s)):e[u]=new L(t,o[u]);for(u=0;u<f;++u)(c=n[u])&&l.get(p[u])===c&&(i[u]=c)}function O(t){return t.__data__}function P(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var j="http://www.w3.org/1999/xhtml",q={svg:"http://www.w3.org/2000/svg",xhtml:j,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},X=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),q.hasOwnProperty(n)?{space:q[n],local:t}:t};function I(t){return function(){this.removeAttribute(t)}}function z(t){return function(){this.removeAttributeNS(t.space,t.local)}}function V(t,n){return function(){this.setAttribute(t,n)}}function R(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function W(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function B(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var Z=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function $(t){return function(){this.style.removeProperty(t)}}function Q(t,n,e){return function(){this.style.setProperty(t,n,e)}}function G(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function J(t,n){return t.style.getPropertyValue(n)||Z(t).getComputedStyle(t,null).getPropertyValue(n)}function K(t){return function(){delete this[t]}}function tt(t,n){return function(){this[t]=n}}function nt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function et(t){return t.trim().split(/^|\s+/)}function rt(t){return t.classList||new it(t)}function it(t){this._node=t,this._names=et(t.getAttribute("class")||"")}function ot(t,n){for(var e=rt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function at(t,n){for(var e=rt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function ut(t){return function(){ot(this,t)}}function ct(t){return function(){at(this,t)}}function st(t,n){return function(){(n.apply(this,arguments)?ot:at)(this,t)}}it.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function lt(){this.textContent=""}function ft(t){return function(){this.textContent=t}}function ht(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function pt(){this.innerHTML=""}function gt(t){return function(){this.innerHTML=t}}function dt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function vt(){this.nextSibling&&this.parentNode.appendChild(this)}function yt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function mt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===j&&n.documentElement.namespaceURI===j?n.createElement(t):n.createElementNS(e,t)}}function _t(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var wt=function(t){var n=X(t);return(n.local?_t:mt)(n)};function xt(){return null}function Mt(){var t=this.parentNode;t&&t.removeChild(this)}function bt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function At(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function kt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Tt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function St(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,u=i.length;a<u;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function Ct(t,n,e){var r=Z(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Nt(t,n){return function(){return Ct(this,t,n)}}function Dt(t,n){return function(){return Ct(this,t,n.apply(this,arguments))}}var Et=[null];function Ut(t,n){this._groups=t,this._parents=n}function Lt(){return new Ut([[document.documentElement]],Et)}Ut.prototype=Lt.prototype={constructor:Ut,select:function(t){"function"!=typeof t&&(t=M(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,s=r[i]=new Array(c),l=0;l<c;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),s[l]=a);return new Ut(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);return null==n?[]:b(n)}}(t):k(t);for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],c=u.length,s=0;s<c;++s)(a=u[s])&&(r.push(t.call(a,a.__data__,s,u)),i.push(a));return new Ut(r,i)},selectChild:function(t){return this.select(null==t?N:function(t){return function(){return C.call(this.children,t)}}("function"==typeof t?t:S(t)))},selectChildren:function(t){return this.selectAll(null==t?E:function(t){return function(){return D.call(this.children,t)}}("function"==typeof t?t:S(t)))},filter:function(t){"function"!=typeof t&&(t=T(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new Ut(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,O);var e=n?H:Y,r=this._parents,i=this._groups;"function"!=typeof t&&(t=F(t));for(var o=i.length,a=new Array(o),u=new Array(o),c=new Array(o),s=0;s<o;++s){var l=r[s],f=i[s],h=f.length,p=b(t.call(l,l&&l.__data__,s,r)),g=p.length,d=u[s]=new Array(g),v=a[s]=new Array(g),y=c[s]=new Array(h);e(l,f,d,v,y,p,n);for(var m,_,w=0,x=0;w<g;++w)if(m=d[w]){for(w>=x&&(x=w+1);!(_=v[x])&&++x<g;);m._next=_||null}}return(a=new Ut(a,r))._enter=u,a._exit=c,a},enter:function(){return new Ut(this._enter||this._groups.map(U),this._parents)},exit:function(){return new Ut(this._exit||this._groups.map(U),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){if(!(t instanceof Ut))throw new Error("invalid merge");for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,s=n[u],l=e[u],f=s.length,h=a[u]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;u<r;++u)a[u]=n[u];return new Ut(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=P);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],c=u.length,s=i[o]=new Array(c),l=0;l<c;++l)(a=u[l])&&(s[l]=a);s.sort(n)}return new Ut(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=X(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?z:I:"function"==typeof n?e.local?B:W:e.local?R:V)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?$:"function"==typeof n?G:Q)(t,n,null==e?"":e)):J(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?K:"function"==typeof n?nt:tt)(t,n)):this.node()[t]},classed:function(t,n){var e=et(t+"");if(arguments.length<2){for(var r=rt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?st:n?ut:ct)(e,n))},text:function(t){return arguments.length?this.each(null==t?lt:("function"==typeof t?ht:ft)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?pt:("function"==typeof t?dt:gt)(t)):this.node().innerHTML},raise:function(){return this.each(vt)},lower:function(){return this.each(yt)},append:function(t){var n="function"==typeof t?t:wt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:wt(t),r=null==n?xt:"function"==typeof n?n:M(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Mt)},clone:function(t){return this.select(t?At:bt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=kt(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?St:Tt,r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,s=0,l=u.length;s<l;++s)for(r=0,c=u[s];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?Dt:Nt)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};var Ft=Lt,Yt=function(t){return"string"==typeof t?new Ut([[document.querySelector(t)]],[document.documentElement]):new Ut([[t]],Et)};var Ht=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Ot(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Pt(){}var jt="\\s*([+-]?\\d+)\\s*",qt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Xt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",It=/^#([0-9a-f]{3,8})$/,zt=new RegExp("^rgb\\("+[jt,jt,jt]+"\\)$"),Vt=new RegExp("^rgb\\("+[Xt,Xt,Xt]+"\\)$"),Rt=new RegExp("^rgba\\("+[jt,jt,jt,qt]+"\\)$"),Wt=new RegExp("^rgba\\("+[Xt,Xt,Xt,qt]+"\\)$"),Bt=new RegExp("^hsl\\("+[qt,Xt,Xt]+"\\)$"),Zt=new RegExp("^hsla\\("+[qt,Xt,Xt,qt]+"\\)$"),$t={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Qt(){return this.rgb().formatHex()}function Gt(){return this.rgb().formatRgb()}function Jt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=It.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Kt(n):3===e?new rn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?tn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?tn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=zt.exec(t))?new rn(n[1],n[2],n[3],1):(n=Vt.exec(t))?new rn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Rt.exec(t))?tn(n[1],n[2],n[3],n[4]):(n=Wt.exec(t))?tn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Bt.exec(t))?cn(n[1],n[2]/100,n[3]/100,1):(n=Zt.exec(t))?cn(n[1],n[2]/100,n[3]/100,n[4]):$t.hasOwnProperty(t)?Kt($t[t]):"transparent"===t?new rn(NaN,NaN,NaN,0):null}function Kt(t){return new rn(t>>16&255,t>>8&255,255&t,1)}function tn(t,n,e,r){return r<=0&&(t=n=e=NaN),new rn(t,n,e,r)}function nn(t){return t instanceof Pt||(t=Jt(t)),t?new rn((t=t.rgb()).r,t.g,t.b,t.opacity):new rn}function en(t,n,e,r){return 1===arguments.length?nn(t):new rn(t,n,e,null==r?1:r)}function rn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function on(){return"#"+un(this.r)+un(this.g)+un(this.b)}function an(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function un(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function cn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new ln(t,n,e,r)}function sn(t){if(t instanceof ln)return new ln(t.h,t.s,t.l,t.opacity);if(t instanceof Pt||(t=Jt(t)),!t)return new ln;if(t instanceof ln)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,c=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=c>0&&c<1?0:a,new ln(a,u,c,t.opacity)}function ln(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function fn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function hn(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}Ht(Pt,Jt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Qt,formatHex:Qt,formatHsl:function(){return sn(this).formatHsl()},formatRgb:Gt,toString:Gt}),Ht(rn,en,Ot(Pt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:on,formatHex:on,formatRgb:an,toString:an})),Ht(ln,(function(t,n,e,r){return 1===arguments.length?sn(t):new ln(t,n,e,null==r?1:r)}),Ot(Pt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ln(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ln(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new rn(fn(t>=240?t-240:t+120,i,r),fn(t,i,r),fn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var pn=t=>()=>t;function gn(t,n){return function(e){return t+e*n}}function dn(t){return 1==(t=+t)?vn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):pn(isNaN(n)?e:n)}}function vn(t,n){var e=n-t;return e?gn(t,e):pn(isNaN(t)?n:t)}var yn=function t(n){var e=dn(n);function r(t,n){var r=e((t=en(t)).r,(n=en(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=vn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function mn(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=en(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}mn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return hn((e-r/n)*n,a,i,o,u)}})),mn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return hn((e-r/n)*n,i,o,a,u)}}));var _n=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function wn(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function xn(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Dn(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}var Mn=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},bn=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},An=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Dn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},kn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Tn=new RegExp(kn.source,"g");var Sn,Cn,Nn=function(t,n){var e,r,i,o=kn.lastIndex=Tn.lastIndex=0,a=-1,u=[],c=[];for(t+="",n+="";(e=kn.exec(t))&&(r=Tn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:bn(e,r)})),o=Tn.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)u[(e=c[r]).i]=e.x(t);return u.join("")})},Dn=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?pn(n):("number"===r?bn:"string"===r?(e=Jt(n))?(n=e,yn):Nn:n instanceof Jt?yn:n instanceof Date?Mn:wn(n)?_n:Array.isArray(n)?xn:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?An:bn)(t,n)},En=0,Un=0,Ln=0,Fn=0,Yn=0,Hn=0,On="object"==typeof performance&&performance.now?performance:Date,Pn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function jn(){return Yn||(Pn(qn),Yn=On.now()+Hn)}function qn(){Yn=0}function Xn(){this._call=this._time=this._next=null}function In(t,n,e){var r=new Xn;return r.restart(t,n,e),r}function zn(){Yn=(Fn=On.now())+Hn,En=Un=0;try{!function(){jn(),++En;for(var t,n=Sn;n;)(t=Yn-n._time)>=0&&n._call.call(null,t),n=n._next;--En}()}finally{En=0,function(){var t,n,e=Sn,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Sn=n);Cn=t,Rn(r)}(),Yn=0}}function Vn(){var t=On.now(),n=t-Fn;n>1e3&&(Hn-=n,Fn=t)}function Rn(t){En||(Un&&(Un=clearTimeout(Un)),t-Yn>24?(t<1/0&&(Un=setTimeout(zn,t-On.now()-Hn)),Ln&&(Ln=clearInterval(Ln))):(Ln||(Fn=On.now(),Ln=setInterval(Vn,1e3)),En=1,Pn(zn)))}Xn.prototype=In.prototype={constructor:Xn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?jn():+e)+(null==n?0:+n),this._next||Cn===this||(Cn?Cn._next=this:Sn=this,Cn=this),this._call=t,this._time=e,Rn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Rn())}};var Wn=function(t,n,e){var r=new Xn;return n=null==n?0:+n,r.restart(e=>{r.stop(),t(e+n)},n,e),r},Bn=w("start","end","cancel","interrupt"),Zn=[],$n=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var s,l,f,h;if(1!==e.state)return u();for(s in i)if((h=i[s]).name===e.name){if(3===h.state)return Wn(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(Wn((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),s=0,l=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=In((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Bn,tween:Zn,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function Qn(t,n){var e=Jn(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Gn(t,n){var e=Jn(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Jn(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Kn,te=function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}},ne=180/Math.PI,ee={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},re=function(t,n,e,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*ne,skewX:Math.atan(c)*ne,scaleX:a,scaleY:u}};function ie(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var c=a.push("translate(",null,n,null,e);u.push({i:c-4,x:bn(t,i)},{i:c-2,x:bn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:bn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:bn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,c),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:bn(t,e)},{i:u-2,x:bn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var n,e=-1,r=c.length;++e<r;)u[(n=c[e]).i]=n.x(t);return u.join("")}}}var oe=ie((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?ee:re(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),ae=ie((function(t){return null==t?ee:(Kn||(Kn=document.createElementNS("http://www.w3.org/2000/svg","g")),Kn.setAttribute("transform",t),(t=Kn.transform.baseVal.consolidate())?(t=t.matrix,re(t.a,t.b,t.c,t.d,t.e,t.f)):ee)}),", ",")",")");function ue(t,n){var e,r;return function(){var i=Gn(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function ce(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Gn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=u;break}c===s&&i.push(u)}o.tween=i}}function se(t,n,e){var r=t._id;return t.each((function(){var t=Gn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Jn(t,r).value[n]}}var le=function(t,n){var e;return("number"==typeof n?bn:n instanceof Jt?yn:(e=Jt(n))?(n=e,yn):Nn)(t,n)};function fe(t){return function(){this.removeAttribute(t)}}function he(t){return function(){this.removeAttributeNS(t.space,t.local)}}function pe(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function ge(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function de(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttribute(t)}}function ve(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttributeNS(t.space,t.local)}}function ye(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function me(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function _e(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&me(t,i)),e}return i._value=n,i}function we(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&ye(t,i)),e}return i._value=n,i}function xe(t,n){return function(){Qn(this,t).delay=+n.apply(this,arguments)}}function Me(t,n){return n=+n,function(){Qn(this,t).delay=n}}function be(t,n){return function(){Gn(this,t).duration=+n.apply(this,arguments)}}function Ae(t,n){return n=+n,function(){Gn(this,t).duration=n}}function ke(t,n){if("function"!=typeof n)throw new Error;return function(){Gn(this,t).ease=n}}function Te(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Qn:Gn;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var Se=Ft.prototype.constructor;function Ce(t){return function(){this.style.removeProperty(t)}}function Ne(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function De(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Ne(t,o,e)),r}return o._value=n,o}function Ee(t){return function(n){this.textContent=t.call(this,n)}}function Ue(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Ee(r)),n}return r._value=t,r}var Le=0;function Fe(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ye(){return++Le}var He=Ft.prototype;Fe.prototype=function(t){return Ft().transition(t)}.prototype={constructor:Fe,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=M(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,s=r[a],l=s.length,f=o[a]=new Array(l),h=0;h<l;++h)(u=s[h])&&(c=t.call(u,u.__data__,h,s))&&("__data__"in u&&(c.__data__=u.__data__),f[h]=c,$n(f[h],n,e,h,f,Jn(u,e)));return new Fe(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=k(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,s=r[u],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,p=t.call(c,c.__data__,f,s),g=Jn(c,e),d=0,v=p.length;d<v;++d)(h=p[d])&&$n(h,n,e,d,p,g);o.push(p),a.push(c)}return new Fe(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=T(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new Fe(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,s=n[u],l=e[u],f=s.length,h=a[u]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;u<r;++u)a[u]=n[u];return new Fe(a,this._parents,this._name,this._id)},selection:function(){return new Se(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Ye(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,s=0;s<c;++s)if(a=u[s]){var l=Jn(a,n);$n(a,t,e,s,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Fe(r,this._parents,t,e)},call:He.call,nodes:He.nodes,node:He.node,size:He.size,empty:He.empty,each:He.each,on:function(t,n){var e=this._id;return arguments.length<2?Jn(this.node(),e).on.on(t):this.each(Te(e,t,n))},attr:function(t,n){var e=X(t),r="transform"===e?ae:le;return this.attrTween(t,"function"==typeof n?(e.local?ve:de)(e,r,se(this,"attr."+t,n)):null==n?(e.local?he:fe)(e):(e.local?ge:pe)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=X(t);return this.tween(e,(r.local?_e:we)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?oe:le;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=J(this,t),a=(this.style.removeProperty(t),J(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,Ce(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=J(this,t),u=e(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=J(this,t)),a===c?null:a===r&&c===i?o:(i=c,o=n(r=a,u))}}(t,r,se(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var c=Gn(this,t),s=c.on,l=null==c.value[a]?o||(o=Ce(n)):void 0;s===e&&i===l||(r=(e=s).copy()).on(u,i=l),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=J(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,De(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(se(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Ue(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Jn(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?ue:ce)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?xe:Me)(n,t)):Jn(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?be:Ae)(n,t)):Jn(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(ke(n,t)):Jn(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;Gn(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},c={value:function(){0==--i&&o()}};e.each((function(){var e=Gn(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(c)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:He[Symbol.iterator]};var Oe={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Pe(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}Ft.prototype.interrupt=function(t){return this.each((function(){te(this,t)}))},Ft.prototype.transition=function(t){var n,e;t instanceof Fe?(n=t._id,t=t._name):(n=Ye(),(e=Oe).time=jn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,s=0;s<c;++s)(a=u[s])&&$n(a,t,n,s,u,e||Pe(a,n));return new Fe(r,this._parents,t,n)};const{abs:je,max:qe,min:Xe}=Math;function Ie(t){return[+t[0],+t[1]]}function ze(t){return[Ie(t[0]),Ie(t[1])]}["w","e"].map(Ve),["n","s"].map(Ve),["n","w","e","s","nw","ne","sw","se"].map(Ve);function Ve(t){return{type:t}}var Re=Math.sqrt(50),We=Math.sqrt(10),Be=Math.sqrt(2);function Ze(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=Re?10:o>=We?5:o>=Be?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=Re?10:o>=We?5:o>=Be?2:1)}function $e(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=Re?i*=10:o>=We?i*=5:o>=Be&&(i*=2),n<t?-i:i}var Qe=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},Ge=function(t){let n=t,e=t;function r(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;e(t[o],n)<0?r=o+1:i=o}return r}return 1===t.length&&(n=(n,e)=>t(n)-e,e=function(t){return(n,e)=>Qe(t(n),e)}(t)),{left:r,center:function(t,e,i,o){null==i&&(i=0),null==o&&(o=t.length);const a=r(t,e,i,o-1);return a>i&&n(t[a-1],e)>-n(t[a],e)?a-1:a},right:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;e(t[o],n)>0?i=o:r=o+1}return r}}};const Je=Ge(Qe),Ke=Je.right;Je.left,Ge((function(t){return null===t?NaN:+t})).center;var tr=Ke,nr=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}};function er(t){return+t}var rr=[0,1];function ir(t){return t}function or(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function ar(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=or(i,r),o=e(a,o)):(r=or(r,i),o=e(o,a)),function(t){return o(r(t))}}function ur(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=or(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=tr(t,n,1,r)-1;return o[e](i[e](n))}}function cr(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function sr(){var t,n,e,r,i,o,a=rr,u=rr,c=Dn,s=ir;function l(){var t,n,e,c=Math.min(a.length,u.length);return s!==ir&&(t=a[0],n=a[c-1],t>n&&(e=t,t=n,n=e),s=function(e){return Math.max(t,Math.min(n,e))}),r=c>2?ur:ar,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),u,c)))(t(s(n)))}return f.invert=function(e){return s(n((o||(o=r(u,a.map(t),bn)))(e)))},f.domain=function(t){return arguments.length?(a=Array.from(t,er),l()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),l()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),c=nr,l()},f.clamp=function(t){return arguments.length?(s=!!t||ir,l()):s!==ir},f.interpolate=function(t){return arguments.length?(c=t,l()):c},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}function lr(){return sr()(ir,ir)}function fr(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var hr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function pr(t){if(!(n=hr.exec(t)))throw new Error("invalid format: "+t);var n;return new gr({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function gr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}pr.prototype=gr.prototype,gr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};function dr(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}var vr,yr,mr,_r,wr=function(t){return(t=dr(Math.abs(t)))?t[1]:NaN},xr=function(t,n){var e=dr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Mr={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>xr(100*t,n),r:xr,s:function(t,n){var e=dr(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(vr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+dr(t,Math.max(0,n+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)},br=function(t){return t},Ar=Array.prototype.map,kr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];yr=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?br:(n=Ar.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?br:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(Ar.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=pr(t)).fill,e=t.align,f=t.sign,h=t.symbol,p=t.zero,g=t.width,d=t.comma,v=t.precision,y=t.trim,m=t.type;"n"===m?(d=!0,m="g"):Mr[m]||(void 0===v&&(v=12),y=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===h?o:/[%p]/.test(m)?c:"",x=Mr[m],M=/[defgprs%]/.test(m);function b(t){var i,o,c,h=_,b=w;if("c"===m)b=x(t)+b,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:x(Math.abs(t),v),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),A&&0==+t&&"+"!==f&&(A=!1),h=(A?"("===f?f:s:"-"===f||"("===f?"":f)+h,b=("s"===m?kr[8+vr/3]:"")+b+(A&&"("===f?")":""),M)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){b=(46===c?a+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}d&&!p&&(t=r(t,1/0));var k=h.length+t.length+b.length,T=k<g?new Array(g-k+1).join(n):"";switch(d&&p&&(t=r(T+t,T.length?g-b.length:1/0),T=""),e){case"<":t=h+t+b+T;break;case"=":t=h+T+t+b;break;case"^":t=T.slice(0,k=T.length>>1)+h+t+b+T.slice(k);break;default:t=T+h+t+b}return u(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),b.toString=function(){return t+""},b}return{format:f,formatPrefix:function(t,n){var e=f(((t=pr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(wr(n)/3))),i=Math.pow(10,-r),o=kr[8+r/3];return function(t){return e(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),mr=yr.format,_r=yr.formatPrefix;function Tr(t,n,e,r){var i,o=$e(t,n,e);switch((r=pr(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(wr(n)/3)))-wr(Math.abs(t)))}(o,a))||(r.precision=i),_r(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,wr(n)-wr(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-wr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return mr(r)}function Sr(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=Ze(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(a=-a,t=Math.ceil(t*a),n=Math.floor(n*a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)/a;return r&&o.reverse(),o}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Tr(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i,o=n(),a=0,u=o.length-1,c=o[a],s=o[u],l=10;for(s<c&&(i=c,c=s,s=i,i=a,a=u,u=i);l-- >0;){if((i=Ze(c,s,e))===r)return o[a]=c,o[u]=s,n(o);if(i>0)c=Math.floor(c/i)*i,s=Math.ceil(s/i)*i;else{if(!(i<0))break;c=Math.ceil(c*i)/i,s=Math.floor(s*i)/i}r=i}return t},t}const Cr=Symbol("implicit");function Nr(){var t=new Map,n=[],e=[],r=Cr;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Cr)return r;t.set(o,a=n.push(i))}return e[(a-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=new Map;for(const r of e){const e=r+"";t.has(e)||t.set(e,n.push(r))}return i},i.range=function(t){return arguments.length?(e=Array.from(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Nr(n,e).unknown(r)},fr.apply(i,arguments),i}var Dr=new Date,Er=new Date;function Ur(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return Ur((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Dr.setTime(+n),Er.setTime(+r),t(Dr),t(Er),Math.floor(e(Dr,Er))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Lr=Ur((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Lr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ur((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Fr=Lr,Yr=(Lr.range,Ur((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),Hr=Yr;Yr.range;function Or(t){return Ur((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Pr=Or(0),jr=Or(1),qr=Or(2),Xr=Or(3),Ir=Or(4),zr=Or(5),Vr=Or(6),Rr=(Pr.range,jr.range,qr.range,Xr.range,Ir.range,zr.range,Vr.range,Ur(t=>t.setHours(0,0,0,0),(t,n)=>t.setDate(t.getDate()+n),(t,n)=>(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5,t=>t.getDate()-1)),Wr=Rr,Br=(Rr.range,Ur((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),Zr=Br,$r=(Br.range,Ur((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),Qr=$r,Gr=($r.range,Ur((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Jr=Gr,Kr=(Gr.range,Ur((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));Kr.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ur((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Kr:null};var ti=Kr;Kr.range;function ni(t){return Ur((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var ei=ni(0),ri=ni(1),ii=ni(2),oi=ni(3),ai=ni(4),ui=ni(5),ci=ni(6),si=(ei.range,ri.range,ii.range,oi.range,ai.range,ui.range,ci.range,Ur((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),li=si,fi=(si.range,Ur((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));fi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ur((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var hi=fi;fi.range;function pi(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function gi(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function di(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var vi,yi,mi={"-":"",_:" ",0:"0"},_i=/^\s*\d+/,wi=/^%/,xi=/[\\^$*+?|[\]().{}]/g;function Mi(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function bi(t){return t.replace(xi,"\\$&")}function Ai(t){return new RegExp("^(?:"+t.map(bi).join("|")+")","i")}function ki(t){return new Map(t.map((t,n)=>[t.toLowerCase(),n]))}function Ti(t,n,e){var r=_i.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Si(t,n,e){var r=_i.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ci(t,n,e){var r=_i.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Ni(t,n,e){var r=_i.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Di(t,n,e){var r=_i.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Ei(t,n,e){var r=_i.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Ui(t,n,e){var r=_i.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Li(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Fi(t,n,e){var r=_i.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Yi(t,n,e){var r=_i.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Hi(t,n,e){var r=_i.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Oi(t,n,e){var r=_i.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Pi(t,n,e){var r=_i.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function ji(t,n,e){var r=_i.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function qi(t,n,e){var r=_i.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Xi(t,n,e){var r=_i.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Ii(t,n,e){var r=_i.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function zi(t,n,e){var r=wi.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Vi(t,n,e){var r=_i.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Ri(t,n,e){var r=_i.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Wi(t,n){return Mi(t.getDate(),n,2)}function Bi(t,n){return Mi(t.getHours(),n,2)}function Zi(t,n){return Mi(t.getHours()%12||12,n,2)}function $i(t,n){return Mi(1+Wr.count(Fr(t),t),n,3)}function Qi(t,n){return Mi(t.getMilliseconds(),n,3)}function Gi(t,n){return Qi(t,n)+"000"}function Ji(t,n){return Mi(t.getMonth()+1,n,2)}function Ki(t,n){return Mi(t.getMinutes(),n,2)}function to(t,n){return Mi(t.getSeconds(),n,2)}function no(t){var n=t.getDay();return 0===n?7:n}function eo(t,n){return Mi(Pr.count(Fr(t)-1,t),n,2)}function ro(t){var n=t.getDay();return n>=4||0===n?Ir(t):Ir.ceil(t)}function io(t,n){return t=ro(t),Mi(Ir.count(Fr(t),t)+(4===Fr(t).getDay()),n,2)}function oo(t){return t.getDay()}function ao(t,n){return Mi(jr.count(Fr(t)-1,t),n,2)}function uo(t,n){return Mi(t.getFullYear()%100,n,2)}function co(t,n){return Mi((t=ro(t)).getFullYear()%100,n,2)}function so(t,n){return Mi(t.getFullYear()%1e4,n,4)}function lo(t,n){var e=t.getDay();return Mi((t=e>=4||0===e?Ir(t):Ir.ceil(t)).getFullYear()%1e4,n,4)}function fo(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Mi(n/60|0,"0",2)+Mi(n%60,"0",2)}function ho(t,n){return Mi(t.getUTCDate(),n,2)}function po(t,n){return Mi(t.getUTCHours(),n,2)}function go(t,n){return Mi(t.getUTCHours()%12||12,n,2)}function vo(t,n){return Mi(1+li.count(hi(t),t),n,3)}function yo(t,n){return Mi(t.getUTCMilliseconds(),n,3)}function mo(t,n){return yo(t,n)+"000"}function _o(t,n){return Mi(t.getUTCMonth()+1,n,2)}function wo(t,n){return Mi(t.getUTCMinutes(),n,2)}function xo(t,n){return Mi(t.getUTCSeconds(),n,2)}function Mo(t){var n=t.getUTCDay();return 0===n?7:n}function bo(t,n){return Mi(ei.count(hi(t)-1,t),n,2)}function Ao(t){var n=t.getUTCDay();return n>=4||0===n?ai(t):ai.ceil(t)}function ko(t,n){return t=Ao(t),Mi(ai.count(hi(t),t)+(4===hi(t).getUTCDay()),n,2)}function To(t){return t.getUTCDay()}function So(t,n){return Mi(ri.count(hi(t)-1,t),n,2)}function Co(t,n){return Mi(t.getUTCFullYear()%100,n,2)}function No(t,n){return Mi((t=Ao(t)).getUTCFullYear()%100,n,2)}function Do(t,n){return Mi(t.getUTCFullYear()%1e4,n,4)}function Eo(t,n){var e=t.getUTCDay();return Mi((t=e>=4||0===e?ai(t):ai.ceil(t)).getUTCFullYear()%1e4,n,4)}function Uo(){return"+0000"}function Lo(){return"%"}function Fo(t){return+t}function Yo(t){return Math.floor(+t/1e3)}!function(t){vi=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,s=Ai(i),l=ki(i),f=Ai(o),h=ki(o),p=Ai(a),g=ki(a),d=Ai(u),v=ki(u),y=Ai(c),m=ki(c),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Wi,e:Wi,f:Gi,g:co,G:lo,H:Bi,I:Zi,j:$i,L:Qi,m:Ji,M:Ki,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Fo,s:Yo,S:to,u:no,U:eo,V:io,w:oo,W:ao,x:null,X:null,y:uo,Y:so,Z:fo,"%":Lo},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:ho,e:ho,f:mo,g:No,G:Eo,H:po,I:go,j:vo,L:yo,m:_o,M:wo,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Fo,s:Yo,S:xo,u:Mo,U:bo,V:ko,w:To,W:So,x:null,X:null,y:Co,Y:Do,Z:Uo,"%":Lo},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=g.get(r[0].toLowerCase()),e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h.get(r[0].toLowerCase()),e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m.get(r[0].toLowerCase()),e+r[0].length):-1},B:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.m=v.get(r[0].toLowerCase()),e+r[0].length):-1},c:function(t,e,r){return A(t,n,e,r)},d:Hi,e:Hi,f:Ii,g:Ui,G:Ei,H:Pi,I:Pi,j:Oi,L:Xi,m:Yi,M:ji,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=l.get(r[0].toLowerCase()),e+r[0].length):-1},q:Fi,Q:Vi,s:Ri,S:qi,u:Si,U:Ci,V:Ni,w:Ti,W:Di,x:function(t,n,r){return A(t,e,n,r)},X:function(t,n,e){return A(t,r,n,e)},y:Ui,Y:Ei,Z:Li,"%":zi};function M(t,n){return function(e){var r,i,o,a=[],u=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++u<s;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(i=mi[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function b(t,n){return function(e){var r,i,o=di(1900,void 0,1);if(A(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=gi(di(o.y,0,1))).getUTCDay(),r=i>4||0===i?ri.ceil(r):ri(r),r=li.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=pi(di(o.y,0,1))).getDay(),r=i>4||0===i?jr.ceil(r):jr(r),r=Wr.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?gi(di(o.y,0,1)).getUTCDay():pi(di(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,gi(o)):pi(o)}}function A(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(r>=c)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in mi?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=M(e,_),_.X=M(r,_),_.c=M(n,_),w.x=M(e,w),w.X=M(r,w),w.c=M(n,w),{format:function(t){var n=M(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=b(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=M(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=b(t+="",!0);return n.toString=function(){return t},n}}}(t),yi=vi.format,vi.parse,vi.utcFormat,vi.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function Ho(t){return new Date(t)}function Oo(t){return t instanceof Date?+t:+new Date(+t)}function Po(t,n,e,r,i,o,a,u,c){var s=lr(),l=s.invert,f=s.domain,h=c(".%L"),p=c(":%S"),g=c("%I:%M"),d=c("%I %p"),v=c("%a %d"),y=c("%b %d"),m=c("%B"),_=c("%Y"),w=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,31536e6]];function x(u){return(a(u)<u?h:o(u)<u?p:i(u)<u?g:r(u)<u?d:n(u)<u?e(u)<u?v:y:t(u)<u?m:_)(u)}function M(n,e,r){if(null==n&&(n=10),"number"==typeof n){var i,o=Math.abs(r-e)/n,a=Ge((function(t){return t[2]})).right(w,o);return a===w.length?(i=$e(e/31536e6,r/31536e6,n),n=t):a?(i=(a=w[o/w[a-1][2]<w[a][2]/o?a-1:a])[1],n=a[0]):(i=Math.max($e(e,r,n),1),n=u),n.every(i)}return n}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?f(Array.from(t,Oo)):f().map(Ho)},s.ticks=function(t){var n,e=f(),r=e[0],i=e[e.length-1],o=i<r;return o&&(n=r,r=i,i=n),n=(n=M(t,r,i))?n.range(r,i+1):[],o?n.reverse():n},s.tickFormat=function(t,n){return null==n?x:c(n)},s.nice=function(t){var n=f();return(t=M(t,n[0],n[n.length-1]))?f(function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t}(n,t)):s},s.copy=function(){return cr(s,Po(t,n,e,r,i,o,a,u,c))},s}var jo=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e}("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");const qo=Math.PI,Xo=2*qo,Io=Xo-1e-6;function zo(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Vo(){return new zo}zo.prototype=Vo.prototype={constructor:zo,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,c=r-n,s=o-t,l=a-n,f=s*s+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(l*u-c*s)>1e-6&&i){var h=e-o,p=r-a,g=u*u+c*c,d=h*h+p*p,v=Math.sqrt(g),y=Math.sqrt(f),m=i*Math.tan((qo-Math.acos((g+f-d)/(2*v*y)))/2),_=m/y,w=m/v;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*s)+","+(n+_*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>s*p)+","+(this._x1=t+w*u)+","+(this._y1=n+w*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),c=t+a,s=n+u,l=1^o,f=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),e&&(f<0&&(f=f%Xo+Xo),f>Io?this._+="A"+e+","+e+",0,1,"+l+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+l+","+(this._x1=c)+","+(this._y1=s):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=qo)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Ro=Vo,Wo=(Array.prototype.slice,function(t){return function(){return t}});function Bo(t){this._context=t}Bo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Zo=function(t){return new Bo(t)};function $o(t){return t[0]}function Qo(t){return t[1]}var Go=function(t,n){var e=Wo(!0),r=null,i=Zo,o=null;function a(a){var u,c,s,l=(a=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(a)).length,f=!1;for(null==r&&(o=i(s=Ro())),u=0;u<=l;++u)!(u<l&&e(c=a[u],u,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(c,u,a),+n(c,u,a));if(s)return o=null,s+""||null}return t="function"==typeof t?t:void 0===t?$o:Wo(t),n="function"==typeof n?n:void 0===n?Qo:Wo(n),a.x=function(n){return arguments.length?(t="function"==typeof n?n:Wo(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:Wo(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:Wo(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a};function Jo(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Ko(t){this._context=t}Ko.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Jo(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Jo(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var ta=function(t){return new Ko(t)};function na(t){return((t=Math.exp(t))+1/t)/2}(function t(n,e,r){function i(t,i){var o,a,u=t[0],c=t[1],s=t[2],l=i[0],f=i[1],h=i[2],p=l-u,g=f-c,d=p*p+g*g;if(d<1e-12)a=Math.log(h/s)/n,o=function(t){return[u+t*p,c+t*g,s*Math.exp(n*t*a)]};else{var v=Math.sqrt(d),y=(h*h-s*s+r*d)/(2*s*e*v),m=(h*h-s*s-r*d)/(2*h*e*v),_=Math.log(Math.sqrt(y*y+1)-y),w=Math.log(Math.sqrt(m*m+1)-m);a=(w-_)/n,o=function(t){var r,i=t*a,o=na(_),l=s/(e*v)*(o*(r=n*i+_,((r=Math.exp(2*r))-1)/(r+1))-function(t){return((t=Math.exp(t))-1/t)/2}(_));return[u+l*p,c+l*g,s*o/na(n*i+_)]}}return o.duration=1e3*a*n/Math.SQRT2,o}return i.rho=function(n){var e=Math.max(.001,+n),r=e*e;return t(e,r,r*r)},i})(Math.SQRT2,2,4);function ea(t,n,e){this.k=t,this.x=n,this.y=e}ea.prototype={constructor:ea,scale:function(t){return 1===t?this:new ea(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new ea(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new ea(1,0,0);ea.prototype;function ra(t){return function(t){if(Array.isArray(t))return ia(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,n){if(!t)return;if("string"==typeof t)return ia(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(e);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return ia(t,n)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ia(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}var oa,aa,ua,ca,sa,la,fa,ha=Yt("#diagram"),pa=+ha.attr("width"),ga=+ha.attr("height"),da=pa/2,va=ga/2,ya=ga/2-100,ma=function(t,n,e){return t>n?e:-e},_a=function(t,n,e,r,i){switch(e){case 2:case 6:return function(t,n,e,r){var i=da+e,o=n,a=n;return r?(o-=60,a-=30):(o+=60,a+=30),[[t,n],[t,a],[t+(i-t)/2,o],[i,a],[i,va]]}(t,n,i,r);default:return[[t,o=n],[a=da+i,o],[a,va]]}var o,a},wa=function(t){var n={deviceNames:["Solar Panels","Wind Turbine","Battery","DC Charger","Consumption","Grid","Solar Irradiance","Wind Speed"],isNode:[1,1,1,1,1,1,0,0],iconMap:["sun","wind","battery","car","house","grid","sun","wind"],iconScale:[1.2,1.4,.6,.8,1,1.2],iconX:[-.5,-.35,-.85,-.9,-.49,-.6],iconY:[-.5,-.75,-.25,-.5,-.5,-.75],positions:[0,1,2,5,4,6],edgeOrder:[2,4,3,1,0,5]},e=new Map,r=0,i=0,o=0;n.deviceNames.forEach((function(e,r){t.has(e)&&t.get(e).power>0&n.isNode[r]&&(o+=t.get(e).power)}));var a,u=(a=o,Math.max(Math.min(a,100),1)/(100/48));return console.log("total"+o),console.log("total"+u),n.edgeOrder.forEach((function(a,c){var s=t.get(n.deviceNames[a]).power,l=n.positions[a],f=function(t){return Math.round(Math.sin(2*Math.PI/8*(t+4))*ya*1.5+da)}(l),h=function(t){return Math.round(Math.cos(2*Math.PI/8*(t+4))*ya+va)}(l),p=0==a||1==a||s>0,g=Math.abs(u*s/o),d=Math.max(g,6),v=-u/2;p?(r+d>u?v=u/2-d/2:v+=r+g/2,r+=g):(i+d>u?v=u/2-d/2:v+=i+g/2,i+=g);var y={x:f,y:h,isPositive:p,strokeWidth:d,position:l,pathString:_a(f,h,l,p,v),icon:{x:n.iconX[a],y:n.iconY[a],name:n.iconMap[a],scale:n.iconScale[a]}};e.set(n.deviceNames[a],y)})),e},xa=function(t){var n=wa(t);return function(t,n){var e=n.dataMap,r=n.propMap,i=r,o=[],a=[];e.forEach((function(t,n,e){r.has(n)?o.push(t):a.push(t)})),console.log(i),console.log(o);var u,c=t.selectAll(".edgeLayer"),s=t.selectAll(".nodeLayer"),l=t.selectAll(".textLayer"),f=c.selectAll(".outline-path").data(o),h=l.selectAll(".text-value").data(o),p=l.selectAll(".text-name").data(o),g=l.selectAll(".text-time").data([(u=new Date,("0"+u.getHours()).slice(-2)+":"+("0"+u.getMinutes()).slice(-2))]),d=s.selectAll("image").data(o),v=ra(new Set(o.map((function(t){return t.group})))),y=Nr().domain(v).range(["#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"]),m=Go();m.curve(ta),f.enter().append("path").attr("class","outline-path").attr("stroke",(function(t,n){return y(n)})).merge(f).transition().duration(1e3).attr("d",(function(t,n){return m(i.get(t.device).pathString)})).attr("stroke-width",(function(t,n){return i.get(t.device).strokeWidth})),d.enter().append("svg:image").attr("class","node-icon").attr("xlink:href",(function(t,n){return"/"+i.get(t.device).icon.name+".svg"})).attr("x",(function(t,n){return 100*i.get(t.device).icon.x*i.get(t.device).icon.scale})).attr("y",(function(t,n){return 100*i.get(t.device).icon.y*i.get(t.device).icon.scale})).attr("transform",(function(t,n){return"translate(".concat(i.get(t.device).x,", ").concat(i.get(t.device).y,")")})).attr("height",(function(t,n){return 100*i.get(t.device).icon.scale})),p.enter().append("text").attr("class","text-name").attr("x",(function(t,n){return ma(i.get(t.device).x,da,65)})).attr("y",(function(t,n){return-10})).attr("transform",(function(t,n){return"translate(".concat(i.get(t.device).x,", ").concat(i.get(t.device).y,")")})).text((function(t,n){return t.device})).attr("text-anchor",(function(t,n){return i.get(t.device).x>da?"start":"end"})).attr("font-size","14px"),h.enter().append("text").attr("class","text-value").attr("x",(function(t,n){return ma(i.get(t.device).x,da,65)})).attr("y",(function(t,n){return 22})).attr("transform",(function(t,n){return"translate(".concat(i.get(t.device).x,", ").concat(i.get(t.device).y,")")})).attr("text-anchor",(function(t,n){return i.get(t.device).x>da?"start":"end"})).attr("fill",(function(t,n){return y(t.group)})).merge(h).text((function(t,n){return t.power})),g.enter().append("text").attr("class","text-time").attr("x",pa-500).attr("y",100).merge(g).text((function(t){return t})),t.selectAll(".text-value").append("tspan").text("kW"),d.exit().remove(),f.exit().remove(),h.exit().remove(),p.exit().remove()}(ha,{dataMap:t,propMap:n})},Ma=function(t,n){var e=n.colorScale,r=n.circleRadius,i=n.spacing,o=n.textOffset,a=t.selectAll("g").data(e.domain()),u=a.enter().append("g").attr("class","tick");u.merge(a).attr("transform",(function(t,n){return"translate(0, ".concat(n*i,")")})),a.exit().remove(),u.append("circle").merge(a.select("circle")).attr("r",r).attr("fill",e),u.append("text").merge(a.select("text")).text((function(t){return t})).attr("dy","0.32em").attr("x",o)},ba=Yt("#diagram"),Aa=+ba.attr("width"),ka=+ba.attr("height"),Ta=60,Sa=200,Ca=105,Na=Aa-Ca-Sa,Da=ka-Ta-80,Ea=Nr(jo),Ua=function(){return fr.apply(Po(Fr,Hr,Pr,Wr,Zr,Qr,Jr,ti,yi).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}(),La=function t(){var n=lr();return n.copy=function(){return cr(n,t())},fr.apply(n,arguments),Sr(n)}(),Fa=function(t,n,e,r){(sa=e.selectAll(".chartLayer")).attr("transform","translate(".concat(Ca,",").concat(Ta,")")),ua=e.selectAll(".xAxisLayer"),ca=e.selectAll(".yAxisLayer"),fa=sa.selectAll(".title").datum(r),Ua.domain(n.x).range([0,Na]),La.domain(n.y).range([Da,0]),oa=p(3,Ua),aa=function(t){return p(4,t)}(La).tickSize(-Na).tickPadding(10),ca.transition().duration(750).call(aa),fa.enter().append("text").attr("class","title").attr("y",-10).merge(fa).text(r),ua.attr("transform","translate(0,".concat(Da,")")).transition().duration(750).call(oa),la=Go().x((function(t){return Ua(function(t){return t.timestamp}(t))})).y((function(t){return La(function(t){return t.power}(t))})).curve(ta),Ea.domain(t.keys()),console.log(Array.from(t.values()));var i=sa.selectAll(".line-path").data(Array.from(t.values()));i.enter().append("path").attr("class","line-path").merge(i).attr("d",(function(t){return la(t)})).attr("stroke",(function(t){return Ea(t[0].device)})),i.exit().remove()},Ya=function(t,n){return Math.round(t*Math.pow(10,n))/Math.pow(10,n)},Ha=function(t,n){var e=Ya(function(t){return 15+15*Math.sin(t+Math.random())}(n),1),r=Ya(function(t,n){return.15*n*Math.pow(t,3)*1.5/1e3}(e,1.2),1),i=Ya(function(t,n){var e=t,r=(.5+Math.random())/(288/e)*(-1*(n-5)*(n-17));return Math.max(r,0)}(t,n),1),o=Ya(function(t){return 4.5*t}(i),1),a=Ya(function(t){var n=t+4*Math.random()-2;return 50*Math.exp(-.5*Math.pow((n-2)/5,2))+1}(n),1),u=Ya(function(t){return 8==t||10==t||6==t?50+10*Math.random():0}(n),1),c=0;return(c=Ya(a+u-o-r,1))>0&&(c=Math.min(c,5)),[i,o,e,r,c,-u,-a,Ya(-r-o+a+u-c,1)]},Oa=function(t,n,e){var r=[];return function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}(t,t-e,-n).forEach((function(t){r.push(new Date(t))})),r},Pa=function(t,n,e){var r=Oa(e,t,n),i=["Solar Irradiance","Solar Panels","Wind Speed","Wind Turbine","Battery","DC Charger","Consumption","Grid"],o=["solar","solar","wind","wind","battery","charger","conusmption","grid"],a=[];return r.forEach((function(t){Ha(t.getDate(),t.getHours()).forEach((function(n,e){a.push({timestamp:t,group:"EZONE",device:i[e],type:o[e],power:n})}))})),a},ja=function(t){var n=function(t,...n){return o(t,i,i,n)}(t,(function(t){return t.device}));return n.forEach((function(t,n,e){return t.sort((function(t,n){return t.timestamp-n.timestamp}))})),n},qa=function(){var t,n;nu?(-1!=Ra&&(clearInterval(Ra),Ra=-1),Fa($a,ru,Va,Ka)):Ra=xa((t=$a,n=new Map,t.forEach((function(t,e,r){return n.set(e,t[t.length-1])})),n))},Xa=function(){Za=Ba.filter((function(t){return eu-t.timestamp.getTime()<tu})),ru.x=r(Za,(function(t){return t.timestamp})),ru.y=r(Za,(function(t){return t.power})),$a=ja(Za),qa()};window.changeTimeScale=Xa;var Ia=function(){Ba=Pa(iu,za(31,0),eu),Xa()};window.refreshData=Ia,window.updateDisplay=function(){var t=eu;eu+=iu*Math.round(10*Math.random());var n=Pa(iu,eu-t,eu);Ba=Ba.concat(n),console.log(Ba),Xa()},window.toggleDisplay=function(){var t;Va.selectAll("*").remove(),(nu=!nu)?(Va.append("g").attr("class","chartLayer"),(t=Va.select(".chartLayer")).append("g").attr("class","xAxisLayer"),t.append("g").attr("class","yAxisLayer"),ua=t.selectAll(".xAxisLayer"),ca=t.selectAll(".yAxisLayer"),t.append("g").attr("transform","translate(".concat(Aa-Sa,",").concat(Ta,")")).call(Ma,{colorScale:Ea,circleRadius:13,spacing:30,textOffset:15}),t.append("rect").attr("class","chartBG").attr("width",Na).attr("height",Da),ca.append("text").attr("class","axis-label").attr("y",-60).attr("x",-Da/2).attr("fill","black").attr("transform","rotate(-90)").attr("text-anchor","middle").text("Power (kWh)"),ua.append("text").attr("class","axis-label").attr("y",80).attr("x",Na/2).attr("fill","black").text("Time")):(Va.append("g").attr("class","edgeLayer"),Va.append("g").attr("class","nodeLayer"),Va.append("g").attr("class","textLayer")),qa()};var za=function(t,n){return 60*(24*t+n)*60*1e3},Va=Yt("#diagram");Va.attr("width"),Va.attr("height");Va.append("g").attr("class","edgeLayer"),Va.append("g").attr("class","nodeLayer"),Va.append("g").attr("class","textLayer");var Ra=-1,Wa=new Map;Wa.set("day",za(1,0)),Wa.set("week",za(6,0)),Wa.set("month",za(31,0));var Ba,Za,$a,Qa,Ga,Ja,Ka="day",tu=Wa.get(Ka),nu=!1,eu=(new Date).getTime(),ru={},iu=za(0,1);console.log(((Qa=new XMLHttpRequest).onreadystatechange=function(){4==(void 0).readyState&&200==(void 0).status&&(void 0).responseText},Qa.open("GET","https://robotics.ee.uwa.edu.au/telemetry/ems/initial_one_month_load.php",!0),void Qa.send())),Ga=Array.from(Wa.keys()),(Ja=Yt("#chart_options").append("select")).selectAll("myOptions").data(Ga).enter().append("option").text((function(t){return t})).attr("value",(function(t){return t})),Ja.on("change",(function(t){Ka=Ja.property("value"),tu=Wa.get(Ka),Xa()})),Ia()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,