-- Drop table

-- DROP TABLE public.ems_access_table;

CREATE TABLE public.ems_access_table (
	"token" varchar(512) NULL,
	pass varchar(100) NULL,
	id varchar(100) NULL,
	"User" varchar(100) NULL
);

-- Drop table

-- DROP TABLE public.ems_attribute_mapping_table;

CREATE TABLE public.ems_attribute_mapping_table (
	attribute_name_ext varchar(60) NOT NULL,
	attribute_id int4 NOT NULL,
	CONSTRAINT ems_attribute_mapping_table_fk FOREIGN KEY (attribute_id) REFERENCES ems_attribute_table(attribute_id)
);

-- Table Triggers

-- DROP TRIGGER "RI_ConstraintTrigger_388541" ON public.ems_attribute_mapping_table;

create constraint trigger "RI_ConstraintTrigger_388541" after
insert
    on
    ems_attribute_mapping_table
from
    ems_attribute_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_ins"();
-- DROP TRIGGER "RI_ConstraintTrigger_388542" ON public.ems_attribute_mapping_table;

create constraint trigger "RI_ConstraintTrigger_388542" after
update
    on
    ems_attribute_mapping_table
from
    ems_attribute_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_upd"();

-- Drop table

-- DROP TABLE public.ems_attribute_table;

CREATE TABLE public.ems_attribute_table (
	attribute_id serial NOT NULL,
	attribute_name varchar(60) NOT NULL,
	unit varchar(60) NULL,
	CONSTRAINT ems_attribute_table_pk PRIMARY KEY (attribute_id)
);

-- Table Triggers

-- DROP TRIGGER "RI_ConstraintTrigger_388539" ON public.ems_attribute_table;

create constraint trigger "RI_ConstraintTrigger_388539" after
delete
    on
    ems_attribute_table
from
    ems_attribute_mapping_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_del"();
-- DROP TRIGGER "RI_ConstraintTrigger_388540" ON public.ems_attribute_table;

create constraint trigger "RI_ConstraintTrigger_388540" after
update
    on
    ems_attribute_table
from
    ems_attribute_mapping_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_upd"();
-- DROP TRIGGER "RI_ConstraintTrigger_388566" ON public.ems_attribute_table;

create constraint trigger "RI_ConstraintTrigger_388566" after
delete
    on
    ems_attribute_table
from
    ems_combination_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_del"();
-- DROP TRIGGER "RI_ConstraintTrigger_388567" ON public.ems_attribute_table;

create constraint trigger "RI_ConstraintTrigger_388567" after
update
    on
    ems_attribute_table
from
    ems_combination_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_upd"();

-- Drop table

-- DROP TABLE public.ems_combination_table;

CREATE TABLE public.ems_combination_table (
	comb_id serial NOT NULL,
	device_id int4 NOT NULL,
	attribute_id int4 NOT NULL,
	CONSTRAINT ems_combination_table_pk PRIMARY KEY (comb_id),
	CONSTRAINT ems_combination_table_fk FOREIGN KEY (device_id) REFERENCES ems_device_table(device_id),
	CONSTRAINT ems_combination_table_fk_1 FOREIGN KEY (attribute_id) REFERENCES ems_attribute_table(attribute_id)
);

-- Table Triggers

-- DROP TRIGGER "RI_ConstraintTrigger_388568" ON public.ems_combination_table;

create constraint trigger "RI_ConstraintTrigger_388568" after
insert
    on
    ems_combination_table
from
    ems_attribute_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_ins"();
-- DROP TRIGGER "RI_ConstraintTrigger_388569" ON public.ems_combination_table;

create constraint trigger "RI_ConstraintTrigger_388569" after
update
    on
    ems_combination_table
from
    ems_attribute_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_upd"();
-- DROP TRIGGER "RI_ConstraintTrigger_388588" ON public.ems_combination_table;

create constraint trigger "RI_ConstraintTrigger_388588" after
insert
    on
    ems_combination_table
from
    ems_device_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_ins"();
-- DROP TRIGGER "RI_ConstraintTrigger_388589" ON public.ems_combination_table;

create constraint trigger "RI_ConstraintTrigger_388589" after
update
    on
    ems_combination_table
from
    ems_device_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_upd"();
-- DROP TRIGGER "RI_ConstraintTrigger_388591" ON public.ems_combination_table;

create constraint trigger "RI_ConstraintTrigger_388591" after
delete
    on
    ems_combination_table
from
    ems_transaction_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_del"();
-- DROP TRIGGER "RI_ConstraintTrigger_388592" ON public.ems_combination_table;

create constraint trigger "RI_ConstraintTrigger_388592" after
update
    on
    ems_combination_table
from
    ems_transaction_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_upd"();

-- Drop table

-- DROP TABLE public.ems_device_mapping_table;

CREATE TABLE public.ems_device_mapping_table (
	device_name_ext varchar(60) NOT NULL,
	device_id int4 NOT NULL,
	CONSTRAINT ems_device_mapping_table_pk PRIMARY KEY (device_name_ext),
	CONSTRAINT ems_device_mapping_table_fk FOREIGN KEY (device_id) REFERENCES ems_device_table(device_id)
);

-- Table Triggers

-- DROP TRIGGER "RI_ConstraintTrigger_388558" ON public.ems_device_mapping_table;

create constraint trigger "RI_ConstraintTrigger_388558" after
insert
    on
    ems_device_mapping_table
from
    ems_device_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_ins"();
-- DROP TRIGGER "RI_ConstraintTrigger_388559" ON public.ems_device_mapping_table;

create constraint trigger "RI_ConstraintTrigger_388559" after
update
    on
    ems_device_mapping_table
from
    ems_device_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_upd"();

-- Drop table

-- DROP TABLE public.ems_device_table;

CREATE TABLE public.ems_device_table (
	device_id serial NOT NULL,
	device_name varchar(60) NOT NULL,
	pvsystem varchar(60) NULL,
	CONSTRAINT ems_device_table_pk PRIMARY KEY (device_id)
);

-- Table Triggers

-- DROP TRIGGER "RI_ConstraintTrigger_388556" ON public.ems_device_table;

create constraint trigger "RI_ConstraintTrigger_388556" after
delete
    on
    ems_device_table
from
    ems_device_mapping_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_del"();
-- DROP TRIGGER "RI_ConstraintTrigger_388557" ON public.ems_device_table;

create constraint trigger "RI_ConstraintTrigger_388557" after
update
    on
    ems_device_table
from
    ems_device_mapping_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_upd"();
-- DROP TRIGGER "RI_ConstraintTrigger_388586" ON public.ems_device_table;

create constraint trigger "RI_ConstraintTrigger_388586" after
delete
    on
    ems_device_table
from
    ems_combination_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_del"();
-- DROP TRIGGER "RI_ConstraintTrigger_388587" ON public.ems_device_table;

create constraint trigger "RI_ConstraintTrigger_388587" after
update
    on
    ems_device_table
from
    ems_combination_table not deferrable initially immediate for each row execute procedure "RI_FKey_noaction_upd"();

-- Drop table

-- DROP TABLE public.ems_transaction_ext_table;

CREATE TABLE public.ems_transaction_ext_table (
	trans_ext_id bigserial NOT NULL,
	"timestamp" timestamp(0) NOT NULL,
	value float4 NULL,
	device_name_ext varchar(60) NOT NULL,
	attribute_name_ext varchar(60) NOT NULL,
	ref_ext varchar(20) NULL,
	trans_id int8 NULL
);

-- Table Triggers

-- DROP TRIGGER ems_transaction_ext_table_trigger ON public.ems_transaction_ext_table;

create trigger ems_transaction_ext_table_trigger after
insert
    on
    ems_transaction_ext_table for each row execute procedure ems_transaction_table_insert();

-- Drop table

-- DROP TABLE public.ems_transaction_table;

CREATE TABLE public.ems_transaction_table (
	trans_id bigserial NOT NULL,
	comb_id int4 NOT NULL,
	"timestamp" timestamp(0) NOT NULL,
	value float4 NULL,
	CONSTRAINT ems_transaction_table_pk PRIMARY KEY (trans_id),
	CONSTRAINT ems_transaction_table_fk FOREIGN KEY (comb_id) REFERENCES ems_combination_table(comb_id)
);

-- Table Triggers

-- DROP TRIGGER "RI_ConstraintTrigger_388593" ON public.ems_transaction_table;

create constraint trigger "RI_ConstraintTrigger_388593" after
insert
    on
    ems_transaction_table
from
    ems_combination_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_ins"();
-- DROP TRIGGER "RI_ConstraintTrigger_388594" ON public.ems_transaction_table;

create constraint trigger "RI_ConstraintTrigger_388594" after
update
    on
    ems_transaction_table
from
    ems_combination_table not deferrable initially immediate for each row execute procedure "RI_FKey_check_upd"();

CREATE OR REPLACE VIEW public.ems_transaction_view
AS SELECT ems_transaction_table.trans_id, ems_device_table.pvsystem, ems_device_table.device_name, ems_attribute_table.attribute_name, ems_attribute_table.unit, ems_transaction_table."timestamp", ems_transaction_table.value
   FROM ems_transaction_table, ems_combination_table, ems_attribute_table, ems_device_table
  WHERE ems_transaction_table.comb_id = ems_combination_table.comb_id AND ems_combination_table.device_id = ems_device_table.device_id AND ems_combination_table.attribute_id = ems_attribute_table.attribute_id;

CREATE UNIQUE INDEX ems_attribute_table_pk ON ems_attribute_table USING btree (attribute_id);

CREATE UNIQUE INDEX ems_device_table_pk ON ems_device_table USING btree (device_id);

CREATE UNIQUE INDEX ems_transaction_table_pk ON ems_transaction_table USING btree (trans_id);

CREATE UNIQUE INDEX ems_combination_table_pk ON ems_combination_table USING btree (comb_id);

CREATE UNIQUE INDEX ems_device_mapping_table_pk ON ems_device_mapping_table USING btree (device_name_ext);

CREATE OR REPLACE FUNCTION public.ems_transaction_table_insert()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
        comb_id_local int4;
begin
	
	select ect.comb_id into comb_id_local
	from ems_combination_table ect, ems_device_table edt, ems_attribute_table eat, ems_attribute_mapping_table eamt, ems_device_mapping_table edmt 
	where ect.attribute_id = eat.attribute_id and ect.device_id = edt.device_id and eat.attribute_id = eamt.attribute_id and edt.device_id = edmt.device_id 
	and edmt.device_name_ext = new.device_name_ext and eamt.attribute_name_ext = new.attribute_name_ext;

    INSERT INTO
        ems_transaction_table(comb_id,"timestamp",value)
        VALUES(comb_id_local,new."timestamp",new.value);
     
    update ems_transaction_ext_table 
    set trans_id = currval('ems_transaction_table_trans_id_seq')
    where trans_ext_id = new.trans_ext_id;
       
    RETURN new;	
  END $function$
;

-- DROP SEQUENCE public.ems_attribute_table_attribute_id_seq;

CREATE SEQUENCE public.ems_attribute_table_attribute_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807;

-- DROP SEQUENCE public.ems_combination_table_comb_id_seq;

CREATE SEQUENCE public.ems_combination_table_comb_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807;

-- DROP SEQUENCE public.ems_device_table_device_id_seq;

CREATE SEQUENCE public.ems_device_table_device_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807;

-- DROP SEQUENCE public.ems_transaction_ext_table_trans_ext_id_seq;

CREATE SEQUENCE public.ems_transaction_ext_table_trans_ext_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807;

-- DROP SEQUENCE public.ems_transaction_table_trans_id_seq;

CREATE SEQUENCE public.ems_transaction_table_trans_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807;

-- DROP TYPE _ems_access_table;

CREATE TYPE _ems_access_table (
	INPUT = array_in,
	OUTPUT = array_out,
	RECEIVE = array_recv,
	SEND = array_send,
	ALIGNMENT = 8,
	STORAGE = any,
	CATEGORY = A,
	ELEMENT = ems_access_table,
	DELIMITER = ',');

-- DROP TYPE _ems_attribute_mapping_table;

CREATE TYPE _ems_attribute_mapping_table (
	INPUT = array_in,
	OUTPUT = array_out,
	RECEIVE = array_recv,
	SEND = array_send,
	ALIGNMENT = 8,
	STORAGE = any,
	CATEGORY = A,
	ELEMENT = ems_attribute_mapping_table,
	DELIMITER = ',');

-- DROP TYPE _ems_attribute_table;

CREATE TYPE _ems_attribute_table (
	INPUT = array_in,
	OUTPUT = array_out,
	RECEIVE = array_recv,
	SEND = array_send,
	ALIGNMENT = 8,
	STORAGE = any,
	CATEGORY = A,
	ELEMENT = ems_attribute_table,
	DELIMITER = ',');

-- DROP TYPE _ems_combination_table;

CREATE TYPE _ems_combination_table (
	INPUT = array_in,
	OUTPUT = array_out,
	RECEIVE = array_recv,
	SEND = array_send,
	ALIGNMENT = 8,
	STORAGE = any,
	CATEGORY = A,
	ELEMENT = ems_combination_table,
	DELIMITER = ',');

-- DROP TYPE _ems_device_mapping_table;

CREATE TYPE _ems_device_mapping_table (
	INPUT = array_in,
	OUTPUT = array_out,
	RECEIVE = array_recv,
	SEND = array_send,
	ALIGNMENT = 8,
	STORAGE = any,
	CATEGORY = A,
	ELEMENT = ems_device_mapping_table,
	DELIMITER = ',');

-- DROP TYPE _ems_device_table;

CREATE TYPE _ems_device_table (
	INPUT = array_in,
	OUTPUT = array_out,
	RECEIVE = array_recv,
	SEND = array_send,
	ALIGNMENT = 8,
	STORAGE = any,
	CATEGORY = A,
	ELEMENT = ems_device_table,
	DELIMITER = ',');

-- DROP TYPE _ems_transaction_ext_table;

CREATE TYPE _ems_transaction_ext_table (
	INPUT = array_in,
	OUTPUT = array_out,
	RECEIVE = array_recv,
	SEND = array_send,
	ALIGNMENT = 8,
	STORAGE = any,
	CATEGORY = A,
	ELEMENT = ems_transaction_ext_table,
	DELIMITER = ',');

-- DROP TYPE _ems_transaction_table;

CREATE TYPE _ems_transaction_table (
	INPUT = array_in,
	OUTPUT = array_out,
	RECEIVE = array_recv,
	SEND = array_send,
	ALIGNMENT = 8,
	STORAGE = any,
	CATEGORY = A,
	ELEMENT = ems_transaction_table,
	DELIMITER = ',');

-- DROP TYPE _ems_transaction_view;

CREATE TYPE _ems_transaction_view (
	INPUT = array_in,
	OUTPUT = array_out,
	RECEIVE = array_recv,
	SEND = array_send,
	ALIGNMENT = 8,
	STORAGE = any,
	CATEGORY = A,
	ELEMENT = ems_transaction_view,
	DELIMITER = ',');
